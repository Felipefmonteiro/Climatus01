/*
  WriteMultipleFields

  Description: Writes values to fields 1,2,3 and 4  in a single ThingSpeak update every 20 seconds.

  Hardware: Arduino Ethernet

  !!! IMPORTANT - Modify the secrets.h file for this project with your network connection and ThingSpeak channel details. !!!

  Note:
  - Requires the Ethernet library

  ThingSpeak ( https://www.thingspeak.com ) is an analytic IoT platform service that allows you to aggregate, visualize, and
  analyze live data streams in the cloud. Visit https://www.thingspeak.com to sign up for a free account and create a channel.

  Documentation for the ThingSpeak Communication Library for Arduino is in the README.md folder where the library was installed.
  See https://www.mathworks.com/help/thingspeak/index.html for the full ThingSpeak documentation.

  For licensing information, see the accompanying license file.

  Copyright 2020, The MathWorks, Inc.
*/

#include <Ethernet.h>
#include "secrets.h"
#include "ThingSpeak.h" // always include thingspeak header file after other header files and custom macros

#include <SPI.h>
#include <Wire.h>
#include "DHT.h"
#define DHTPIN 2
#define DHTTYPE DHT22   // DHT 22
DHT dht(DHTPIN, DHTTYPE);
//
float PO;

int MQ135 = A0;

byte mac[] = SECRET_MAC;

// Set the static IP address to use if the DHCP fails to assign
IPAddress ip(192, 168, 0, 177);
IPAddress myDns(192, 168, 0, 1);

EthernetClient client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

void setup() {
  Ethernet.init(10);  // Most Arduino Ethernet hardware
  Serial.begin(115200);  //Initialize serial
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo native USB port only
  }

  // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }
    // try to congifure using IP address instead of DHCP:
    Ethernet.begin(mac, ip, myDns);
  } else {
    Serial.print("  DHCP assigned IP ");
    Serial.println(Ethernet.localIP());
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);

  ThingSpeak.begin(client);  // Initialize ThingSpeak
}

void loop() {

  //coletando dados MQ135
  float MQ135_volt;
  float RS_CO2;
  float R0;
  float Slope;
  float Y_intercept;
  float MQ135Value = (analogRead(MQ135));
  float Y_Value;
  MQ135_volt = MQ135Value * (5.0 / 1023.0);
  RS_CO2 = ((5.0 * 32850) / MQ135_volt) - 32850;
  R0 = 28399;
  Slope = -0.370955166;
  Y_intercept = 0.7597917824;
  Y_Value = RS_CO2 / R0;
  ////Construido concentração CO2 em ppm
  double ppm = pow(10, (log10(Y_Value) - Y_intercept) / Slope);
  
  int CO2 = ppm;
  
  // Coletadados temperatura & umidade & indice conforto
  int numero;
  float somat;
  float somarh;
  float somatemp;
  float somaumid;
  char IDHstatus;

  //Lendo umidade e temperatura e acumulando valores - 20*250ml = 5 seg.
  for (float i = 0; i < 20; i++) {
    float u = dht.readHumidity();
    // Read temperature as Celsius
    float t = dht.readTemperature();
    //acumulando valores
    somat = somat + t;
    somarh = somarh + u;
  }
  float temperatura = somat / 20;
  float umidade = somarh / 20;
  //Lendo umidade
  //float umidade = dht.readHumidity();
  // Read temperature as Celsius
  //float temperatura = dht.readTemperature();
  // Ponto de orvalho
  PO = (pow((umidade / 100.0), (0.125)) * (112.0 + (0.9 * temperatura)) + (0.1 * temperatura) - 112.0);
  //Indice de desconforto humano Ono e kawamura(1991)
  float IDH = 0.99 * temperatura + 0.36 * PO + 41.5;
  //Indice de desconforto temperatura umidade
  float hit = (temperatura * 1.8 + 32) - (0.55 - 0.0055 * umidade) * ((temperatura * 1.8 + 32) - 58);

  // colocando valores no display
  Serial.print("Indice de desconforto: ");
  Serial.print(hit);
  Serial.print("Humidity: ");
  Serial.print(umidade);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temperatura);
  Serial.print(" *C ");

  //Coletando dados do sensor de luz
  int sensorValue = analogRead(A5);
  // convertendo o valor para porcentagem
  int Txsensor = map(analogRead(sensorValue), 0, 1023, 100, 0);
  Serial.print(Txsensor);
  Serial.println("%");
  
  // set the fields with the values
  ThingSpeak.setField(1, temperatura);
  ThingSpeak.setField(2, Txsensor);
  ThingSpeak.setField(3, umidade);
  ThingSpeak.setField(4, CO2);
  //ThingSpeak.setField(5, ppm);

  // write to the ThingSpeak channel
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (x == 200) {
    Serial.println("Channel update successful.");
  }
  else {
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }

  delay(30000); // Wait 20 seconds to update the channel again
}
